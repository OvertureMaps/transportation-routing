/* automatically generated by rust-bindgen 0.69.5 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSMWay {
    pub osmwayid_: u64,
    pub ref_index_: u32,
    pub ref_lang_index_: u32,
    pub ref_left_index_: u32,
    pub ref_left_lang_index_: u32,
    pub ref_right_index_: u32,
    pub ref_right_lang_index_: u32,
    pub int_ref_index_: u32,
    pub int_ref_lang_index_: u32,
    pub int_ref_left_index_: u32,
    pub int_ref_left_lang_index_: u32,
    pub int_ref_right_index_: u32,
    pub int_ref_right_lang_index_: u32,
    pub name_index_: u32,
    pub name_lang_index_: u32,
    pub name_left_index_: u32,
    pub name_left_lang_index_: u32,
    pub name_right_index_: u32,
    pub name_right_lang_index_: u32,
    pub name_forward_index_: u32,
    pub name_forward_lang_index_: u32,
    pub name_backward_index_: u32,
    pub name_backward_lang_index_: u32,
    pub alt_name_index_: u32,
    pub alt_name_lang_index_: u32,
    pub alt_name_left_index_: u32,
    pub alt_name_left_lang_index_: u32,
    pub alt_name_right_index_: u32,
    pub alt_name_right_lang_index_: u32,
    pub official_name_index_: u32,
    pub official_name_lang_index_: u32,
    pub official_name_left_index_: u32,
    pub official_name_left_lang_index_: u32,
    pub official_name_right_index_: u32,
    pub official_name_right_lang_index_: u32,
    pub tunnel_name_index_: u32,
    pub tunnel_name_lang_index_: u32,
    pub tunnel_name_left_index_: u32,
    pub tunnel_name_left_lang_index_: u32,
    pub tunnel_name_right_index_: u32,
    pub tunnel_name_right_lang_index_: u32,
    pub fwd_turn_lanes_index_: u32,
    pub bwd_turn_lanes_index_: u32,
    pub fwd_jct_base_index_: u32,
    pub bwd_jct_base_index_: u32,
    pub fwd_jct_overlay_index_: u32,
    pub bwd_jct_overlay_index_: u32,
    pub fwd_signboard_base_index_: u32,
    pub bwd_signboard_base_index_: u32,
    pub destination_index_: u32,
    pub destination_lang_index_: u32,
    pub destination_forward_index_: u32,
    pub destination_backward_index_: u32,
    pub destination_forward_lang_index_: u32,
    pub destination_backward_lang_index_: u32,
    pub destination_ref_index_: u32,
    pub destination_ref_lang_index_: u32,
    pub destination_ref_to_index_: u32,
    pub destination_ref_to_lang_index_: u32,
    pub destination_int_ref_index_: u32,
    pub destination_int_ref_to_index_: u32,
    pub destination_street_index_: u32,
    pub destination_street_lang_index_: u32,
    pub destination_street_to_index_: u32,
    pub destination_street_to_lang_index_: u32,
    pub junction_name_index_: u32,
    pub junction_name_lang_index_: u32,
    pub junction_ref_index_: u32,
    pub junction_ref_lang_index_: u32,
    pub level_index_: u32,
    pub level_ref_index_: u32,
    pub duration_: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
    pub nodecount_: u16,
    pub speed_limit_: u8,
    pub speed_: u8,
    pub backward_speed_: u8,
    pub forward_speed_: u8,
    pub truck_speed_: u8,
    pub truck_speed_forward_: u8,
    pub truck_speed_backward_: u8,
    pub layer_: i8,
}
#[test]
fn bindgen_test_layout_OSMWay() {
    const UNINIT: ::std::mem::MaybeUninit<OSMWay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSMWay>(),
        320usize,
        concat!("Size of: ", stringify!(OSMWay))
    );
    assert_eq!(
        ::std::mem::align_of::<OSMWay>(),
        8usize,
        concat!("Alignment of ", stringify!(OSMWay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osmwayid_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(osmwayid_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_index_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(ref_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_lang_index_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(ref_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_left_index_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(ref_left_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_left_lang_index_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(ref_left_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_right_index_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(ref_right_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_right_lang_index_) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(ref_right_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_ref_index_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(int_ref_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_ref_lang_index_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(int_ref_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_ref_left_index_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(int_ref_left_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_ref_left_lang_index_) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(int_ref_left_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_ref_right_index_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(int_ref_right_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_ref_right_lang_index_) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(int_ref_right_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_index_) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_lang_index_) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_left_index_) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_left_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_left_lang_index_) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_left_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_right_index_) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_right_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_right_lang_index_) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_right_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_forward_index_) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_forward_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_forward_lang_index_) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_forward_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_backward_index_) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_backward_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_backward_lang_index_) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(name_backward_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_name_index_) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(alt_name_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_name_lang_index_) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(alt_name_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_name_left_index_) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(alt_name_left_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_name_left_lang_index_) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(alt_name_left_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_name_right_index_) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(alt_name_right_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_name_right_lang_index_) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(alt_name_right_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).official_name_index_) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(official_name_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).official_name_lang_index_) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(official_name_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).official_name_left_index_) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(official_name_left_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).official_name_left_lang_index_) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(official_name_left_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).official_name_right_index_) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(official_name_right_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).official_name_right_lang_index_) as usize - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(official_name_right_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel_name_index_) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(tunnel_name_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel_name_lang_index_) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(tunnel_name_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel_name_left_index_) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(tunnel_name_left_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).tunnel_name_left_lang_index_) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(tunnel_name_left_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel_name_right_index_) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(tunnel_name_right_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).tunnel_name_right_lang_index_) as usize - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(tunnel_name_right_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fwd_turn_lanes_index_) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(fwd_turn_lanes_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwd_turn_lanes_index_) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(bwd_turn_lanes_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fwd_jct_base_index_) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(fwd_jct_base_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwd_jct_base_index_) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(bwd_jct_base_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fwd_jct_overlay_index_) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(fwd_jct_overlay_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwd_jct_overlay_index_) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(bwd_jct_overlay_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fwd_signboard_base_index_) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(fwd_signboard_base_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bwd_signboard_base_index_) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(bwd_signboard_base_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_index_) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_lang_index_) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_forward_index_) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_forward_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_backward_index_) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_backward_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_forward_lang_index_) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_forward_lang_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_backward_lang_index_) as usize - ptr as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_backward_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_ref_index_) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_ref_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_ref_lang_index_) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_ref_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_ref_to_index_) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_ref_to_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_ref_to_lang_index_) as usize - ptr as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_ref_to_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_int_ref_index_) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_int_ref_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_int_ref_to_index_) as usize - ptr as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_int_ref_to_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destination_street_index_) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_street_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_street_lang_index_) as usize - ptr as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_street_lang_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_street_to_index_) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_street_to_index_)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).destination_street_to_lang_index_) as usize - ptr as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(destination_street_to_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).junction_name_index_) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(junction_name_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).junction_name_lang_index_) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(junction_name_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).junction_ref_index_) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(junction_ref_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).junction_ref_lang_index_) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(junction_ref_lang_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_index_) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(level_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_ref_index_) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(level_ref_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration_) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(duration_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodecount_) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(nodecount_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed_limit_) as usize - ptr as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(speed_limit_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed_) as usize - ptr as usize },
        307usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(speed_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_speed_) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(backward_speed_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_speed_) as usize - ptr as usize },
        309usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(forward_speed_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truck_speed_) as usize - ptr as usize },
        310usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(truck_speed_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truck_speed_forward_) as usize - ptr as usize },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(truck_speed_forward_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truck_speed_backward_) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(truck_speed_backward_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_) as usize - ptr as usize },
        313usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWay),
            "::",
            stringify!(layer_)
        )
    );
}
impl OSMWay {
    #[inline]
    pub fn destination_only_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_destination_only_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_thru_traffic_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_thru_traffic_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oneway_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oneway_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oneway_reverse_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oneway_reverse_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn roundabout_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_roundabout_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ferry_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ferry_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rail_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rail_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn surface_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_surface_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn tunnel_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tunnel_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn toll_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_toll_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bridge_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bridge_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seasonal_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seasonal_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn drive_on_right_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_drive_on_right_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bike_network_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_bike_network_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn exit_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_exit_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tagged_speed_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tagged_speed_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_tagged_speed_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forward_tagged_speed_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_tagged_speed_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_backward_tagged_speed_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tagged_lanes_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tagged_lanes_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_tagged_lanes_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forward_tagged_lanes_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_tagged_lanes_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_backward_tagged_lanes_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn truck_route_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_truck_route_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sidewalk_right_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sidewalk_right_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sidewalk_left_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sidewalk_left_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sac_scale_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_sac_scale_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn road_class_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_road_class_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn link_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_link_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_use_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn lanes_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_lanes_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_lanes_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(46usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_forward_lanes_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(46usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_lanes_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(50usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_backward_lanes_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(50usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn turn_channel_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(54usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_turn_channel_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(54usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wheelchair_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(55usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wheelchair_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(55usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wheelchair_tag_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wheelchair_tag_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_user_tags_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(57usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_user_tags_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_pronunciation_tags_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_pronunciation_tags_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn internal_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(59usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_internal_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(59usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hov_type_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(60usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hov_type_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(60usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn indoor_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(61usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_indoor_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(61usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pedestrian_forward_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pedestrian_forward_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pedestrian_backward_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pedestrian_backward_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_auto_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bus_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(65usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bus_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(65usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn taxi_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(66usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_taxi_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(66usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn truck_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(67usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_truck_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(67usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn motorcycle_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(68usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_motorcycle_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(68usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn emergency_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(69usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_emergency_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(69usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hov_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(70usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hov_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(70usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn moped_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(71usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_moped_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(71usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_auto_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bus_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(73usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bus_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(73usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn taxi_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(74usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_taxi_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(74usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn truck_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(75usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_truck_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(75usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn motorcycle_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(76usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_motorcycle_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(76usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn emergency_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(77usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_emergency_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(77usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hov_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(78usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hov_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(78usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn moped_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(79usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_moped_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(79usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cycle_lane_right_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_cycle_lane_right_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cycle_lane_left_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(82usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_cycle_lane_left_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(82usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cycle_lane_right_opposite_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(84usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_cycle_lane_right_opposite_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(84usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cycle_lane_left_opposite_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(85usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_cycle_lane_left_opposite_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(85usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shoulder_right_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(86usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_shoulder_right_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(86usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shoulder_left_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(87usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_shoulder_left_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(87usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dismount_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(88usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dismount_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(88usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_sidepath_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(89usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_use_sidepath_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(89usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bike_forward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(90usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bike_forward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(90usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bike_backward_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(91usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bike_backward_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(91usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lit_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(92usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lit_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(92usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn destination_only_hgv_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(93usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_destination_only_hgv_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(93usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn spare2_(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(94usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_spare2_(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(94usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        destination_only_: u32,
        no_thru_traffic_: u32,
        oneway_: u32,
        oneway_reverse_: u32,
        roundabout_: u32,
        ferry_: u32,
        rail_: u32,
        surface_: u32,
        tunnel_: u32,
        toll_: u32,
        bridge_: u32,
        seasonal_: u32,
        drive_on_right_: u32,
        bike_network_: u32,
        exit_: u32,
        tagged_speed_: u32,
        forward_tagged_speed_: u32,
        backward_tagged_speed_: u32,
        tagged_lanes_: u32,
        forward_tagged_lanes_: u32,
        backward_tagged_lanes_: u32,
        truck_route_: u32,
        sidewalk_right_: u32,
        sidewalk_left_: u32,
        sac_scale_: u32,
        road_class_: u32,
        link_: u32,
        use_: u32,
        lanes_: u32,
        forward_lanes_: u32,
        backward_lanes_: u32,
        turn_channel_: u32,
        wheelchair_: u32,
        wheelchair_tag_: u32,
        has_user_tags_: u32,
        has_pronunciation_tags_: u32,
        internal_: u32,
        hov_type_: u32,
        indoor_: u32,
        pedestrian_forward_: u32,
        pedestrian_backward_: u32,
        auto_forward_: u16,
        bus_forward_: u16,
        taxi_forward_: u16,
        truck_forward_: u16,
        motorcycle_forward_: u16,
        emergency_forward_: u16,
        hov_forward_: u16,
        moped_forward_: u16,
        auto_backward_: u16,
        bus_backward_: u16,
        taxi_backward_: u16,
        truck_backward_: u16,
        motorcycle_backward_: u16,
        emergency_backward_: u16,
        hov_backward_: u16,
        moped_backward_: u16,
        cycle_lane_right_: u16,
        cycle_lane_left_: u16,
        cycle_lane_right_opposite_: u16,
        cycle_lane_left_opposite_: u16,
        shoulder_right_: u16,
        shoulder_left_: u16,
        dismount_: u16,
        use_sidepath_: u16,
        bike_forward_: u16,
        bike_backward_: u16,
        lit_: u16,
        destination_only_hgv_: u16,
        spare2_: u16,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let destination_only_: u32 = unsafe { ::std::mem::transmute(destination_only_) };
            destination_only_ as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let no_thru_traffic_: u32 = unsafe { ::std::mem::transmute(no_thru_traffic_) };
            no_thru_traffic_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let oneway_: u32 = unsafe { ::std::mem::transmute(oneway_) };
            oneway_ as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let oneway_reverse_: u32 = unsafe { ::std::mem::transmute(oneway_reverse_) };
            oneway_reverse_ as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let roundabout_: u32 = unsafe { ::std::mem::transmute(roundabout_) };
            roundabout_ as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ferry_: u32 = unsafe { ::std::mem::transmute(ferry_) };
            ferry_ as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let rail_: u32 = unsafe { ::std::mem::transmute(rail_) };
            rail_ as u64
        });
        __bindgen_bitfield_unit.set(7usize, 3u8, {
            let surface_: u32 = unsafe { ::std::mem::transmute(surface_) };
            surface_ as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tunnel_: u32 = unsafe { ::std::mem::transmute(tunnel_) };
            tunnel_ as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let toll_: u32 = unsafe { ::std::mem::transmute(toll_) };
            toll_ as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bridge_: u32 = unsafe { ::std::mem::transmute(bridge_) };
            bridge_ as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let seasonal_: u32 = unsafe { ::std::mem::transmute(seasonal_) };
            seasonal_ as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let drive_on_right_: u32 = unsafe { ::std::mem::transmute(drive_on_right_) };
            drive_on_right_ as u64
        });
        __bindgen_bitfield_unit.set(15usize, 4u8, {
            let bike_network_: u32 = unsafe { ::std::mem::transmute(bike_network_) };
            bike_network_ as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let exit_: u32 = unsafe { ::std::mem::transmute(exit_) };
            exit_ as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let tagged_speed_: u32 = unsafe { ::std::mem::transmute(tagged_speed_) };
            tagged_speed_ as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let forward_tagged_speed_: u32 =
                unsafe { ::std::mem::transmute(forward_tagged_speed_) };
            forward_tagged_speed_ as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let backward_tagged_speed_: u32 =
                unsafe { ::std::mem::transmute(backward_tagged_speed_) };
            backward_tagged_speed_ as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let tagged_lanes_: u32 = unsafe { ::std::mem::transmute(tagged_lanes_) };
            tagged_lanes_ as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let forward_tagged_lanes_: u32 =
                unsafe { ::std::mem::transmute(forward_tagged_lanes_) };
            forward_tagged_lanes_ as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let backward_tagged_lanes_: u32 =
                unsafe { ::std::mem::transmute(backward_tagged_lanes_) };
            backward_tagged_lanes_ as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let truck_route_: u32 = unsafe { ::std::mem::transmute(truck_route_) };
            truck_route_ as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let sidewalk_right_: u32 = unsafe { ::std::mem::transmute(sidewalk_right_) };
            sidewalk_right_ as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let sidewalk_left_: u32 = unsafe { ::std::mem::transmute(sidewalk_left_) };
            sidewalk_left_ as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let sac_scale_: u32 = unsafe { ::std::mem::transmute(sac_scale_) };
            sac_scale_ as u64
        });
        __bindgen_bitfield_unit.set(32usize, 3u8, {
            let road_class_: u32 = unsafe { ::std::mem::transmute(road_class_) };
            road_class_ as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let link_: u32 = unsafe { ::std::mem::transmute(link_) };
            link_ as u64
        });
        __bindgen_bitfield_unit.set(36usize, 6u8, {
            let use_: u32 = unsafe { ::std::mem::transmute(use_) };
            use_ as u64
        });
        __bindgen_bitfield_unit.set(42usize, 4u8, {
            let lanes_: u32 = unsafe { ::std::mem::transmute(lanes_) };
            lanes_ as u64
        });
        __bindgen_bitfield_unit.set(46usize, 4u8, {
            let forward_lanes_: u32 = unsafe { ::std::mem::transmute(forward_lanes_) };
            forward_lanes_ as u64
        });
        __bindgen_bitfield_unit.set(50usize, 4u8, {
            let backward_lanes_: u32 = unsafe { ::std::mem::transmute(backward_lanes_) };
            backward_lanes_ as u64
        });
        __bindgen_bitfield_unit.set(54usize, 1u8, {
            let turn_channel_: u32 = unsafe { ::std::mem::transmute(turn_channel_) };
            turn_channel_ as u64
        });
        __bindgen_bitfield_unit.set(55usize, 1u8, {
            let wheelchair_: u32 = unsafe { ::std::mem::transmute(wheelchair_) };
            wheelchair_ as u64
        });
        __bindgen_bitfield_unit.set(56usize, 1u8, {
            let wheelchair_tag_: u32 = unsafe { ::std::mem::transmute(wheelchair_tag_) };
            wheelchair_tag_ as u64
        });
        __bindgen_bitfield_unit.set(57usize, 1u8, {
            let has_user_tags_: u32 = unsafe { ::std::mem::transmute(has_user_tags_) };
            has_user_tags_ as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let has_pronunciation_tags_: u32 =
                unsafe { ::std::mem::transmute(has_pronunciation_tags_) };
            has_pronunciation_tags_ as u64
        });
        __bindgen_bitfield_unit.set(59usize, 1u8, {
            let internal_: u32 = unsafe { ::std::mem::transmute(internal_) };
            internal_ as u64
        });
        __bindgen_bitfield_unit.set(60usize, 1u8, {
            let hov_type_: u32 = unsafe { ::std::mem::transmute(hov_type_) };
            hov_type_ as u64
        });
        __bindgen_bitfield_unit.set(61usize, 1u8, {
            let indoor_: u32 = unsafe { ::std::mem::transmute(indoor_) };
            indoor_ as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let pedestrian_forward_: u32 = unsafe { ::std::mem::transmute(pedestrian_forward_) };
            pedestrian_forward_ as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let pedestrian_backward_: u32 = unsafe { ::std::mem::transmute(pedestrian_backward_) };
            pedestrian_backward_ as u64
        });
        __bindgen_bitfield_unit.set(64usize, 1u8, {
            let auto_forward_: u16 = unsafe { ::std::mem::transmute(auto_forward_) };
            auto_forward_ as u64
        });
        __bindgen_bitfield_unit.set(65usize, 1u8, {
            let bus_forward_: u16 = unsafe { ::std::mem::transmute(bus_forward_) };
            bus_forward_ as u64
        });
        __bindgen_bitfield_unit.set(66usize, 1u8, {
            let taxi_forward_: u16 = unsafe { ::std::mem::transmute(taxi_forward_) };
            taxi_forward_ as u64
        });
        __bindgen_bitfield_unit.set(67usize, 1u8, {
            let truck_forward_: u16 = unsafe { ::std::mem::transmute(truck_forward_) };
            truck_forward_ as u64
        });
        __bindgen_bitfield_unit.set(68usize, 1u8, {
            let motorcycle_forward_: u16 = unsafe { ::std::mem::transmute(motorcycle_forward_) };
            motorcycle_forward_ as u64
        });
        __bindgen_bitfield_unit.set(69usize, 1u8, {
            let emergency_forward_: u16 = unsafe { ::std::mem::transmute(emergency_forward_) };
            emergency_forward_ as u64
        });
        __bindgen_bitfield_unit.set(70usize, 1u8, {
            let hov_forward_: u16 = unsafe { ::std::mem::transmute(hov_forward_) };
            hov_forward_ as u64
        });
        __bindgen_bitfield_unit.set(71usize, 1u8, {
            let moped_forward_: u16 = unsafe { ::std::mem::transmute(moped_forward_) };
            moped_forward_ as u64
        });
        __bindgen_bitfield_unit.set(72usize, 1u8, {
            let auto_backward_: u16 = unsafe { ::std::mem::transmute(auto_backward_) };
            auto_backward_ as u64
        });
        __bindgen_bitfield_unit.set(73usize, 1u8, {
            let bus_backward_: u16 = unsafe { ::std::mem::transmute(bus_backward_) };
            bus_backward_ as u64
        });
        __bindgen_bitfield_unit.set(74usize, 1u8, {
            let taxi_backward_: u16 = unsafe { ::std::mem::transmute(taxi_backward_) };
            taxi_backward_ as u64
        });
        __bindgen_bitfield_unit.set(75usize, 1u8, {
            let truck_backward_: u16 = unsafe { ::std::mem::transmute(truck_backward_) };
            truck_backward_ as u64
        });
        __bindgen_bitfield_unit.set(76usize, 1u8, {
            let motorcycle_backward_: u16 = unsafe { ::std::mem::transmute(motorcycle_backward_) };
            motorcycle_backward_ as u64
        });
        __bindgen_bitfield_unit.set(77usize, 1u8, {
            let emergency_backward_: u16 = unsafe { ::std::mem::transmute(emergency_backward_) };
            emergency_backward_ as u64
        });
        __bindgen_bitfield_unit.set(78usize, 1u8, {
            let hov_backward_: u16 = unsafe { ::std::mem::transmute(hov_backward_) };
            hov_backward_ as u64
        });
        __bindgen_bitfield_unit.set(79usize, 1u8, {
            let moped_backward_: u16 = unsafe { ::std::mem::transmute(moped_backward_) };
            moped_backward_ as u64
        });
        __bindgen_bitfield_unit.set(80usize, 2u8, {
            let cycle_lane_right_: u16 = unsafe { ::std::mem::transmute(cycle_lane_right_) };
            cycle_lane_right_ as u64
        });
        __bindgen_bitfield_unit.set(82usize, 2u8, {
            let cycle_lane_left_: u16 = unsafe { ::std::mem::transmute(cycle_lane_left_) };
            cycle_lane_left_ as u64
        });
        __bindgen_bitfield_unit.set(84usize, 1u8, {
            let cycle_lane_right_opposite_: u16 =
                unsafe { ::std::mem::transmute(cycle_lane_right_opposite_) };
            cycle_lane_right_opposite_ as u64
        });
        __bindgen_bitfield_unit.set(85usize, 1u8, {
            let cycle_lane_left_opposite_: u16 =
                unsafe { ::std::mem::transmute(cycle_lane_left_opposite_) };
            cycle_lane_left_opposite_ as u64
        });
        __bindgen_bitfield_unit.set(86usize, 1u8, {
            let shoulder_right_: u16 = unsafe { ::std::mem::transmute(shoulder_right_) };
            shoulder_right_ as u64
        });
        __bindgen_bitfield_unit.set(87usize, 1u8, {
            let shoulder_left_: u16 = unsafe { ::std::mem::transmute(shoulder_left_) };
            shoulder_left_ as u64
        });
        __bindgen_bitfield_unit.set(88usize, 1u8, {
            let dismount_: u16 = unsafe { ::std::mem::transmute(dismount_) };
            dismount_ as u64
        });
        __bindgen_bitfield_unit.set(89usize, 1u8, {
            let use_sidepath_: u16 = unsafe { ::std::mem::transmute(use_sidepath_) };
            use_sidepath_ as u64
        });
        __bindgen_bitfield_unit.set(90usize, 1u8, {
            let bike_forward_: u16 = unsafe { ::std::mem::transmute(bike_forward_) };
            bike_forward_ as u64
        });
        __bindgen_bitfield_unit.set(91usize, 1u8, {
            let bike_backward_: u16 = unsafe { ::std::mem::transmute(bike_backward_) };
            bike_backward_ as u64
        });
        __bindgen_bitfield_unit.set(92usize, 1u8, {
            let lit_: u16 = unsafe { ::std::mem::transmute(lit_) };
            lit_ as u64
        });
        __bindgen_bitfield_unit.set(93usize, 1u8, {
            let destination_only_hgv_: u16 =
                unsafe { ::std::mem::transmute(destination_only_hgv_) };
            destination_only_hgv_ as u64
        });
        __bindgen_bitfield_unit.set(94usize, 2u8, {
            let spare2_: u16 = unsafe { ::std::mem::transmute(spare2_) };
            spare2_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSMNode {
    pub osmid_: u64,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 20usize]>,
    pub bss_info_: u32,
    pub linguistic_info_index_: u32,
    pub lng7_: u32,
    pub lat7_: u32,
}
#[test]
fn bindgen_test_layout_OSMNode() {
    const UNINIT: ::std::mem::MaybeUninit<OSMNode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSMNode>(),
        48usize,
        concat!("Size of: ", stringify!(OSMNode))
    );
    assert_eq!(
        ::std::mem::align_of::<OSMNode>(),
        8usize,
        concat!("Alignment of ", stringify!(OSMNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osmid_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMNode),
            "::",
            stringify!(osmid_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bss_info_) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMNode),
            "::",
            stringify!(bss_info_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linguistic_info_index_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMNode),
            "::",
            stringify!(linguistic_info_index_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lng7_) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMNode),
            "::",
            stringify!(lng7_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat7_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMNode),
            "::",
            stringify!(lat7_)
        )
    );
}
impl OSMNode {
    #[inline]
    pub fn name_index_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 21u8) as u64) }
    }
    #[inline]
    pub fn set_name_index_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_index_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 21u8) as u64) }
    }
    #[inline]
    pub fn set_ref_index_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn exit_to_index_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 21u8) as u64) }
    }
    #[inline]
    pub fn set_exit_to_index_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn named_intersection_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_named_intersection_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn country_iso_index_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 21u8) as u64) }
    }
    #[inline]
    pub fn set_country_iso_index_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn state_iso_index_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(85usize, 21u8) as u64) }
    }
    #[inline]
    pub fn set_state_iso_index_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(85usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn traffic_signal_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(106usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_traffic_signal_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(106usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_signal_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(107usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_forward_signal_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(107usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_signal_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(108usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_backward_signal_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(108usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stop_sign_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(109usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_stop_sign_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(109usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_stop_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(110usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_forward_stop_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(110usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_stop_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(111usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_backward_stop_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(111usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn yield_sign_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_yield_sign_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_yield_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(113usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_forward_yield_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(113usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_yield_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(114usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_backward_yield_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(114usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn minor_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(115usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_minor_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(115usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direction_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(116usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_direction_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(116usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn spare_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(117usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_spare_(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(117usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn access_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(128usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_access_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(128usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(140usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_type_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(140usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn intersection_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(144usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intersection_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(144usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn non_link_edge_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(145usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_non_link_edge_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(145usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn link_edge_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(146usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_link_edge_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(146usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shortlink_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(147usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shortlink_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(147usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn non_ferry_edge_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(148usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_non_ferry_edge_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(148usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ferry_edge_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(149usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ferry_edge_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(149usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flat_loop_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(150usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flat_loop_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(150usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn urban_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(151usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_urban_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(151usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tagged_access_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(152usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tagged_access_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(152usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn private_access_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(153usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_private_access_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(153usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cash_only_toll_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(154usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cash_only_toll_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(154usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn spare1_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(155usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_spare1_(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(155usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name_index_: u64,
        ref_index_: u64,
        exit_to_index_: u64,
        named_intersection_: u64,
        country_iso_index_: u64,
        state_iso_index_: u64,
        traffic_signal_: u64,
        forward_signal_: u64,
        backward_signal_: u64,
        stop_sign_: u64,
        forward_stop_: u64,
        backward_stop_: u64,
        yield_sign_: u64,
        forward_yield_: u64,
        backward_yield_: u64,
        minor_: u64,
        direction_: u64,
        spare_: u64,
        access_: u32,
        type_: u32,
        intersection_: u32,
        non_link_edge_: u32,
        link_edge_: u32,
        shortlink_: u32,
        non_ferry_edge_: u32,
        ferry_edge_: u32,
        flat_loop_: u32,
        urban_: u32,
        tagged_access_: u32,
        private_access_: u32,
        cash_only_toll_: u32,
        spare1_: u32,
    ) -> __BindgenBitfieldUnit<[u8; 20usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 20usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 21u8, {
            let name_index_: u64 = unsafe { ::std::mem::transmute(name_index_) };
            name_index_ as u64
        });
        __bindgen_bitfield_unit.set(21usize, 21u8, {
            let ref_index_: u64 = unsafe { ::std::mem::transmute(ref_index_) };
            ref_index_ as u64
        });
        __bindgen_bitfield_unit.set(42usize, 21u8, {
            let exit_to_index_: u64 = unsafe { ::std::mem::transmute(exit_to_index_) };
            exit_to_index_ as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let named_intersection_: u64 = unsafe { ::std::mem::transmute(named_intersection_) };
            named_intersection_ as u64
        });
        __bindgen_bitfield_unit.set(64usize, 21u8, {
            let country_iso_index_: u64 = unsafe { ::std::mem::transmute(country_iso_index_) };
            country_iso_index_ as u64
        });
        __bindgen_bitfield_unit.set(85usize, 21u8, {
            let state_iso_index_: u64 = unsafe { ::std::mem::transmute(state_iso_index_) };
            state_iso_index_ as u64
        });
        __bindgen_bitfield_unit.set(106usize, 1u8, {
            let traffic_signal_: u64 = unsafe { ::std::mem::transmute(traffic_signal_) };
            traffic_signal_ as u64
        });
        __bindgen_bitfield_unit.set(107usize, 1u8, {
            let forward_signal_: u64 = unsafe { ::std::mem::transmute(forward_signal_) };
            forward_signal_ as u64
        });
        __bindgen_bitfield_unit.set(108usize, 1u8, {
            let backward_signal_: u64 = unsafe { ::std::mem::transmute(backward_signal_) };
            backward_signal_ as u64
        });
        __bindgen_bitfield_unit.set(109usize, 1u8, {
            let stop_sign_: u64 = unsafe { ::std::mem::transmute(stop_sign_) };
            stop_sign_ as u64
        });
        __bindgen_bitfield_unit.set(110usize, 1u8, {
            let forward_stop_: u64 = unsafe { ::std::mem::transmute(forward_stop_) };
            forward_stop_ as u64
        });
        __bindgen_bitfield_unit.set(111usize, 1u8, {
            let backward_stop_: u64 = unsafe { ::std::mem::transmute(backward_stop_) };
            backward_stop_ as u64
        });
        __bindgen_bitfield_unit.set(112usize, 1u8, {
            let yield_sign_: u64 = unsafe { ::std::mem::transmute(yield_sign_) };
            yield_sign_ as u64
        });
        __bindgen_bitfield_unit.set(113usize, 1u8, {
            let forward_yield_: u64 = unsafe { ::std::mem::transmute(forward_yield_) };
            forward_yield_ as u64
        });
        __bindgen_bitfield_unit.set(114usize, 1u8, {
            let backward_yield_: u64 = unsafe { ::std::mem::transmute(backward_yield_) };
            backward_yield_ as u64
        });
        __bindgen_bitfield_unit.set(115usize, 1u8, {
            let minor_: u64 = unsafe { ::std::mem::transmute(minor_) };
            minor_ as u64
        });
        __bindgen_bitfield_unit.set(116usize, 1u8, {
            let direction_: u64 = unsafe { ::std::mem::transmute(direction_) };
            direction_ as u64
        });
        __bindgen_bitfield_unit.set(117usize, 11u8, {
            let spare_: u64 = unsafe { ::std::mem::transmute(spare_) };
            spare_ as u64
        });
        __bindgen_bitfield_unit.set(128usize, 12u8, {
            let access_: u32 = unsafe { ::std::mem::transmute(access_) };
            access_ as u64
        });
        __bindgen_bitfield_unit.set(140usize, 4u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(144usize, 1u8, {
            let intersection_: u32 = unsafe { ::std::mem::transmute(intersection_) };
            intersection_ as u64
        });
        __bindgen_bitfield_unit.set(145usize, 1u8, {
            let non_link_edge_: u32 = unsafe { ::std::mem::transmute(non_link_edge_) };
            non_link_edge_ as u64
        });
        __bindgen_bitfield_unit.set(146usize, 1u8, {
            let link_edge_: u32 = unsafe { ::std::mem::transmute(link_edge_) };
            link_edge_ as u64
        });
        __bindgen_bitfield_unit.set(147usize, 1u8, {
            let shortlink_: u32 = unsafe { ::std::mem::transmute(shortlink_) };
            shortlink_ as u64
        });
        __bindgen_bitfield_unit.set(148usize, 1u8, {
            let non_ferry_edge_: u32 = unsafe { ::std::mem::transmute(non_ferry_edge_) };
            non_ferry_edge_ as u64
        });
        __bindgen_bitfield_unit.set(149usize, 1u8, {
            let ferry_edge_: u32 = unsafe { ::std::mem::transmute(ferry_edge_) };
            ferry_edge_ as u64
        });
        __bindgen_bitfield_unit.set(150usize, 1u8, {
            let flat_loop_: u32 = unsafe { ::std::mem::transmute(flat_loop_) };
            flat_loop_ as u64
        });
        __bindgen_bitfield_unit.set(151usize, 1u8, {
            let urban_: u32 = unsafe { ::std::mem::transmute(urban_) };
            urban_ as u64
        });
        __bindgen_bitfield_unit.set(152usize, 1u8, {
            let tagged_access_: u32 = unsafe { ::std::mem::transmute(tagged_access_) };
            tagged_access_ as u64
        });
        __bindgen_bitfield_unit.set(153usize, 1u8, {
            let private_access_: u32 = unsafe { ::std::mem::transmute(private_access_) };
            private_access_ as u64
        });
        __bindgen_bitfield_unit.set(154usize, 1u8, {
            let cash_only_toll_: u32 = unsafe { ::std::mem::transmute(cash_only_toll_) };
            cash_only_toll_ as u64
        });
        __bindgen_bitfield_unit.set(155usize, 5u8, {
            let spare1_: u32 = unsafe { ::std::mem::transmute(spare1_) };
            spare1_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSMWayNode {
    pub node: OSMNode,
    pub way_index: u32,
    pub way_shape_node_index: u32,
}
#[test]
fn bindgen_test_layout_OSMWayNode() {
    const UNINIT: ::std::mem::MaybeUninit<OSMWayNode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSMWayNode>(),
        56usize,
        concat!("Size of: ", stringify!(OSMWayNode))
    );
    assert_eq!(
        ::std::mem::align_of::<OSMWayNode>(),
        8usize,
        concat!("Alignment of ", stringify!(OSMWayNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWayNode),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).way_index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWayNode),
            "::",
            stringify!(way_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).way_shape_node_index) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(OSMWayNode),
            "::",
            stringify!(way_shape_node_index)
        )
    );
}
